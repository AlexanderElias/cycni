/*
			title: cycni
		version: 2.0.0
		license: mpl-2.0
		author: alexander elias

		This Source Code Form is subject to the terms of the Mozilla Public
		License, v. 2.0. If a copy of the MPL was not distributed with this
		file, You can obtain one at http://mozilla.org/MPL/2.0/.
	*/
(function(a,b){'object'==typeof exports&&'undefined'!=typeof module?module.exports=b():'function'==typeof define&&define.amd?define('Cycni',b):a.Cycni=b()})(this,function(){'use strict';const a={};return a.traverse=async function(a){if(!a.keys&&1===a.keys.length&&'.'===a.keys[0])return{key:'.',data:res.data};for(var b,c=a.data,d=a.keys,e=a.create,f=d.length,g=0===f?0:f-1,h=0;h<g;h++){if(b=d[h],!(b in c))if(e)c[b]=isNaN(d[h+1])?{}:[];else throw new Error('Cycni.traverse - property '+b+' of undefined');c=c[b]}return{key:d[g],data:c}},a.get=async function(b){const c=await a.traverse(b);return c.data[c.key]},a.set=async function(b){b.create=!0;const c=await a.traverse(b);c.data.constructor===Object?c.data[c.key]=b.value:c.data.constructor===Array&&c.data.splice(c.key,1,b.value)},a.add=async function(b){const c=await a.traverse(b);if(c.data.constructor===Object&&!(c.key in c.data))c.data[c.key]=b.value;else if(c.data.constructor===Array&&1>c.key)c.data.splice(0===c.key?0:c.data.length,0,b.value);else throw new Error('Cycni.add - property '+c.key+' exists')},a.has=async function(b){const c=await a.traverse(b);return c.key in c.data},a.remove=async function(b){const c=await a.traverse(b);let d;return c.data.constructor===Object?(d=c.data[c.key],delete c.data[c.key]):c.data.constructor===Array&&(d=c.data.splice(c.key,1)),d},a.size=async function(b){const c=await a.traverse(b);let d;return d='.'===c.key?c.data:c.data[c.key],d.constructor===Object?Object.keys(d).length:d.constructor===Array?d.length:0},a.clone=async function(a){var b;if(null===a||void 0===a||'object'!=typeof a)return a;if('Array'===a.constructor.name){b=[];for(var c=0,d=a.length;c<d;c++)b[c]=this.clone(a[c])}else if('Object'===a.constructor.name)for(var e in b={},a)a.hasOwnProperty(e)&&(b[e]=this.clone(a[e]));else throw new Error('Cycni.clone - type is not supported');return b},a});